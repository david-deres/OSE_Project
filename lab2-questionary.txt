=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.


=== Q What's the purpose of leaving virtual memory region
===   0xeebfe000-0xeebff000 inaccessible?
===   (free form, up to 10 words)

guard page for user stack overflow error detection


=== Q Define a page table entry with the following properties:
===   frame starts at 0x1234000. It can be written by the kernel
===   without causing any errors, but has never been written yet. On
===   the other hand, application cannot write to the page, but has
===   recently successfully read from it. All bits which are not
===   responsible for above properties are set to zero.  
===   (a single memory WORD as would be output by gdb's x/1x)

    0x01234025

    ANOTHER OPTION: 0x1234E25 (PTE_AVAILABLE is set to 0xE00) ?????????????

=== Q Consider JOS kernel code:
===     mystery_t x;
===   	char* value = return_a_pointer();
===   	*value = 10;
===   	x = (mystery_t) value;
===   What type mystery_t should refer to?
===   (remove leading "====" from the correct answer line)
     uintptr_t
==== physaddr_t


=== Q What information is stored in page directory when mem_init()
===   finishes? For each non-empty PD entry specify:
===    - decimal index (0-1023)
===    - hexadecimal address of virtual memory mapped by this entry
===    - name of kernel data structure which is intended to be
===      accessible through this PDE (when appropriate, in quotes)
===    - general name (free form, up to 10 words in quotes)
===    Sort the table by the index in ascending order. If several
===    consequent entries are only differ in address field, you can
===    specify ellipses ("...") instead of an "inner" entries. Please
===    align columns into readable table using spaces.
===    Format example (all the values are made up; omit the header):
===    INDEX ADDRESS DATA-STRUCTURE         NAME/DESCRIPTION
===    24    0x12345 "struct Segdesc gdt[]" "Global descriptor table"
===    ...
===    42    0x98765 "struct Segdesc gdt[]" "Global descriptor table"
===    50    0x00011 ""                     "boot loader code"

956     0xef000000    "struct PageInfo *pages"             "UPAGES - pages metadata structure"

957     0xef400000    "pde_t *kern_pgdir"                  "UVPT - current page table"

959     0xefff8000    "extern char bootstack[]"             "kernel stack pages"

960     0xf0000000    "physaddr_t *some_page"               "mapped physical memory pages"

...      ...            ...                                 ...

1023     ...            ...                                 ...



=== Q We have placed the kernel and user environment in the same
===   address space. Why will user programs not be able to read or
===   write the kernel's memory? What specific mechanisms protect the
===   kernel memory?
===   (free form, up to 15 words)

    kernel's memory pages are protected by PTE_U==0.
    means HW enforces kernel access only.

=== Q Which virtual addresses are readable by the user?
===   (in the form ADDR1-ADDR2, if none, specify NONE)

    0x0-0xeebfe000 ??? NOT sure about the first part
    0xeebff000-0xef800000

=== Q Which virtual addresses are writable by the user?
===   (in the form ADDR1-ADDR2, if none, specify NONE)

    0x0-0xeebfe000 ??? SAME
    0xeebff000-0xeec00000


=== Q Assume a hacker can change N bits inside page table (on any
===   level, PD or PT) after it has been set up by the kernel (and
===   before full TLB flush). What is the minimal N to gain full
===   control of the system from hacker's user space process?

     2 (PTE_U + PTE_W)??? 

=== Q What's the maximum amount of physical memory this kernel can
===   support? (number of megabytes, without MB suffix)

    256

=== Q What single constant can be changed in kernel source to make
===   this limit 2 times lower (if kernel normally supports 10MB,
===   we want to make it support only 5MB?

    KERNBASE

=== Q What value should this constant be changed to?

    0xf8000000

=== Q Assume the computer has the maximum amount of memory supported
===   by the (unmodified) kernel. What's the overhead of managing this
===   memory in terms of (physical) memory spent?
===   Specify only data structures which size depends on the amount of
===   physical memory and exclude the "fixed" overhead. For example,
===   if data structure size is 123K+0.01*(memory size) and maximum 
===   amount of memory is 100MB, specify 0.01*100MB = 1024KB.
===   For each such data structure specify:
===    - size in KB (without "KB suffix")
===    - name of kernel data structure (when appropriate, in quotes)
===    - general name (free form, up to 10 words in quotes)
===    Sort the table by the size in ascending order. Please
===    align columns into readable table using spaces.
===    Format example (all the values are made up; omit the header):
===    SIZE  DATA-STRUCTURE         NAME/DESCRIPTION
===    42    "struct Segdesc gdt[]" "Global descriptor table"

4      "pde_t"                  "page directory"

256    "pte_t"                  "page tables"



====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
2
=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
kern/monitor.c
kern/monitor.h
kern/pmap.c
kern/pmap.h
=== Q Describe your solution.
===   (free form, up to 500 words, don't need to use all 500!)
The solution is a monitor command called ‘vmmap’
which executes all the functionality required for the challenge
through sub-commands, one for each specific task.

The subcommand ‘show’ displays the mapping between virtual
and physical addresses at a given range as a table:
column 1 contains the virtual pages in the range,
column 2 contains the corresponding physical pages,
and column 3 contains their permissions.
Since the other interactions are done at page granuality,
the subcommand prints the page number,
for both the physical and virtual pages,
so those can be used later.

The subcommand ‘perm’ takes a range of virtual page numbers
and changes their permissions to one of 4 possibilities:
R, RW, RU, RWU, where R indicates read access,
W indicates write acces and U indicates access by the user environment.

The subcommand ‘set’ takes a range of physical page numbers
and a virtual page number,
and maps the physical pages to the same number of virtual pages,
starting from the given virtual page.
The mapping is initially as permissive as possible,
in case it needs to be used immediately by the kernel,
and should be explicitly restricted with ‘perm’.

The subcommand ‘clear’ takes a range of virtual page numbers
and removes any mapping of physical pages to them.

The subcommand ‘dump’ takes a range of memory addresses
along with a character indicating its type:
‘v’ for virtual memory and ‘p’ for physical.
It then prints each byte in the range as a hexadecimal number,
with at most 8 bytes displayed per line.
