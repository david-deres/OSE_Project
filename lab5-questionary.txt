=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.

=== Q How much disk space can be addressed by a single bitmap block
===   when size of a block is 4KB? (number in _bytes_)

0x08000000

=== Q How much disk space can be addressed by a single bitmap block
===   when size of a block is 512B? (number in _bytes_)

0x00200000

=== Q What is a maximum supported file size in JOS FS? (number in _bytes_)

0x0040A000

=== Q Did you have to do anything else to ensure that the I/O
===   privilege setting is saved and restored properly when you
===   subsequently switch from one environment to another? Why? 
===   (free form)
no, the IDE registers required are accessed only via x86's I/O space,
so the I/O privilege for an environment is maintained,
using only the IOPL bits in the eflags register.
whenever the kernel switches from one environment to another,
it saves the existing register state,
and loads a different one for the other environment,
so the privilege changes accordingly.

=== Q How long approximately did it take you to do this lab?
===   (number of hours for all partners combined)

0x1A

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
6
=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
user/sh.c
=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
to implement variable expansion in the shell,
support for builtin commands,
that affect the shell itself rather than call an external binary was needed.

to do so, the gettoken function was modified to use fields from a struct
rather than local static variables,
so that the shell could search for builtin keywords using it,
independantly of whether runcmd uses it later.

additionally a map of keys and values is maintained,
where each key-value pair, identified by their shared index,
into their respective arrays, represents a variable to be expanded.

for every word recognized by the gettoken function,
the function checks if the word is a variable,
which is indicated by the first letter being '$',
and if so, replaces it with the corrsponding value in the map.

to add a variable, or modify an existing one, from the shell,
the builtin "export" is used, followed by the key and the value.
to remove a variable, the builtin "unexport" is used,
followed by the key to be removed.